// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using khawarizmi.DAL.Context;

#nullable disable

namespace khawarizmi.DAL.Migrations
{
    [DbContext(typeof(KhawarizmiContext))]
    [Migration("20230506225503_DataSeeding")]
    partial class DataSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryTag", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("CategoryTag");
                });

            modelBuilder.Entity("CourseTag", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("CourseTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mobile Development"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Database Design & Development"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Programming Languages"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Game Development"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Software Testing"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Software Engineering"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Software Development Tools"
                        },
                        new
                        {
                            Id = 10,
                            Name = "No-Code Development"
                        });
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DownVotes")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBookmarked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLearning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpVotes")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Asp.Net Core"
                        },
                        new
                        {
                            Id = 6,
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Next.js"
                        },
                        new
                        {
                            Id = 8,
                            Name = "React Js"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 10,
                            Name = "AI"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Machine Learning"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Deep Learning"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Natural Language Processing"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Data Analysis"
                        },
                        new
                        {
                            Id = 15,
                            Name = "R (Programming Language)"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Deep Learning"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Chatgpt"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Google Flutter"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Android Development"
                        },
                        new
                        {
                            Id = 20,
                            Name = "IOS Development"
                        },
                        new
                        {
                            Id = 21,
                            Name = "React Native"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Dart"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 24,
                            Name = "SwiftUI"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 26,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 27,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 29,
                            Name = "C (Programming Language)"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Spring Framework"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Object Oriented Programming"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Unity"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Unreal Engine"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Game Development Fundamentals"
                        },
                        new
                        {
                            Id = 35,
                            Name = "2D Game Development"
                        },
                        new
                        {
                            Id = 36,
                            Name = "3D Game Development"
                        },
                        new
                        {
                            Id = 37,
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 38,
                            Name = "NOSQL"
                        },
                        new
                        {
                            Id = 39,
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Postgres"
                        },
                        new
                        {
                            Id = 41,
                            Name = "SQL Server"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Oracle SQL"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Postman"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Automation Testing"
                        },
                        new
                        {
                            Id = 45,
                            Name = "API Testing"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Data Structure"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Algorithms"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Microservices"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Software Architecture"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Back End Web Development"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Front End Web Development"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Git"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Github"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Jira"
                        },
                        new
                        {
                            Id = 57,
                            Name = "DevOps"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Jenkins"
                        },
                        new
                        {
                            Id = 59,
                            Name = "WordPress"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Web Design"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Microsoft Power Platform"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Wix"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Elementor"
                        });
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CategoryTag", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("khawarizmi.DAL.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTag", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("khawarizmi.DAL.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("khawarizmi.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Course", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("khawarizmi.DAL.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Feedback", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.Course", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("khawarizmi.DAL.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Lesson", b =>
                {
                    b.HasOne("khawarizmi.DAL.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.Course", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("khawarizmi.DAL.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
